const限定符

（1）作用
当我们希望定义一种变量，他的值定义之后不能被修改。例如，用一个值来表示缓冲区大小。当发现缓冲区的大小不够时，可以随时更改缓冲区的大小。另一方面也可以防止程序运行过程中不小心修改该值。

    const int bufSize = 512; //输入缓冲区大小

这样把bufSize定义成一个常量。任何试图为bufSize的行为都将引发错误：

    bufSize = 1024; //错误：试图向const对象赋值

因为const对象一旦创建后其值不能再改变，所以const对象必须初始化。
  
    const int j = get_size();  //正确：运行时初始化
    const int i = 42;  //正确：编译时初始化
    const int k;  //错误：k是一个未经初始化的常量

（2）特点
可以节省空间，避免不必要的内存分配
const定义常量从汇编的角度来说，只给出了对应的内存地址，而不像#define一样给出的是立即数，所以const定义的常量在程序运行过程中只有一个拷贝，而#define定义的常量在程序运行过程中有若干个备份。

const常量具有数据类型，编译器可以进行安全检查；#define宏定义没有数据类型，只是简单的字符替换，不能进行安全检查。

（3）作用域
默认状态下，const对象仅在文件内部有效
多个文件中出现const变量时，等同于在不同文件中定义了独立的变量。
只在一个文件中定义，想在其他文件中使用：
    对于const变量不管是声明还是定义都添加extern关键字 
    //file_1.cpp 定义并初始化了一个常量，该常量能被其他文件访问
    extern const int bufSize = fcn();
    //file_2.h 头文件声明也用extern作了限定，其作用是指明bufSize并非本文件独有，其他文件中也将使用
    extern const int bufSize;

（4）指针和const

指向常量的指针

可以令指针指向常量或者非常量。指向常量的指针不能用于改变其所指向对象的值。要存放常量的地址，只能用指向常量的指针：

    const double pi = 3.14;  // pi是个常量，它的值不能被改变
    double *ptr = &pi;  // 错误：ptr是普通常量，只有指向常量的指针才可以存放常量地址
    const double *cptr = &pi;  // 正确

两种例外：
指针的类型必须与其所指的对象类型一致，但是有例外。
允许指向常量的指针指向非常量

    double dval2 = 3.14;  // dval2的值可以改变
    cptr = &dval2;        // 正确，允许指向常量的指针指向非常量对象，但是不能通过cptr改变dval2的值

这样记忆：所谓指向常量的指针或者引用，不过是指针或者引用自以为是罢了，他们自己觉得自己指向了常量，不去改变所指向对象的值。

常量指针

指针是对象而引用不是，因此可以像其他类型一样，允许把指针本身定为常量。常量指针必须初始化，一旦初始化后，它的值就不能再改变了。*const 用以说明指针是常量，即不变的是指针而非指向的那个值：
    int errNumb = 0;
    int *const curErr = &errNumb; // cuErr将一直指向errNumb
    const double pi = 3.14159
    const double *const pip = &pi; // pip是一个指向常量的常量指针

理解声明的含义：从右往左读，例 curErr最近的是const,所以curErr是一个常量对象

与指向常量的指针不同，常量指针可以用指针去修改其所指对象

    *pip = 2.72;  // 错误：pip是一个指向常量的指针
    if (*curErr){
    errorHandler();
    *curErr = 0; // 正确：把curErr所指对象的值重置
}

顶层const: 指针本身是一个对象，指针又可以指向另外一个对象。因此，指针本身是不是常量，指针所指对象是不常量就是两个独立的问题。
顶层const可以表示任意的对象是常量，如算术类型，类，指针。底层const表示指针所指的对象是一个常量。

    int i = 0;
    int *const p1 = &i;  // 不能改变p1的值，这是一个顶层const
    const int ci = 42;  // 不能改变ci的值，这是一个顶层const
    const int *p2 = &i; // 可以改变p2的值，这是一个底层const
    const int *const p3 = p2;  // 靠右的是顶层const，靠左的是底层const
    const int &r = ci;  // 用于声明引用的const都是底层const

(5) const的引用

可以把引用绑定到const对象上，我们称之为对常量的引用。与普通引用不同，对常量的引用不能被用作修改他所绑定的对象:
    const int ci = 1024;
    const int &a = ci;  //正确：引用及其对应的对象都是常量
    a = 1;  //错误：a是对常量的引用
    int &b = a; //错误：试图让一个非常量引用指向一个常量对象
注意：C++程序员们经常把数组“对const的引用”简称为"常量引用"，严格来说，并不存在常量引用，因为引用不是一个对象。

初始化和对const的引用
引用的类型必须与其所引用的对象类型保持一致，但是有例外。
在初始化常引用时允许用任意表达式作为初始值，只要该表达式的结果能转换成引用的类型即可。尤其允许一个常量引用绑定到非常量,字面值甚至是一个一般的表达式。

    int i = 42;
    const int &r1 = i;  //允许将const int&绑定到一个普通int对象上
    const int &r2 = 42;  // 允许将常量引用绑定到字面值
    const int &r3 = r1 * 2;  // r3是一个常量引用
    int &r4 = r1 * 2;  // r4是一个非常量引用，不是一个常量引用，不能引用一个常量




